## svd({{1,2},{3,4}})
## eigenvalue({{1,2},{3,4}})
## {{1,2}, {3,4}}
## {{a,b}, {c,d}}
## inverse({{a,b,c}, {d,e,f}, {g,h,i}})
# Good recap for vectors/matrices in R
# http://bendixcarstensen.com/APC/linalg-notes-BxC.pdf
# R cheat sheet
# http://cran.r-project.org/doc/contrib/Short-refcard.pdf
# Google / Wikipedia / fellow students
mean(rbinom(10,1,0.5))  	# Bernoulli random variable with success probability 0.5
mean(rnorm(10))			# Gaussian random variable with mean 0 and variance 1
mean(rbinom(10,20,0.5))	# Binomial random variable with total number=20 and success probability=0.5
mean(rexp(10,1))		# Exponential random variable with rate 1
mean(rpois(10,1))		# Poisson random variable with rate 1
## Central limit theorem
x = replicate(10000, mean(runif(1)))
?replicate
runif(1)
mean(runif(1))
mean(runif(1))
x = replicate(10000, mean(runif(1)))
x
x
?sample
space = c(0,10,11)
space
x = sample(space)
x
x
x
x
x = sample(space)
x
x = sample(space,3)
x
x
x = sample(space,3,replace=TRUE)
x
x = sample(space,1000,replace=TRUE)
x
?hist
hist(x,plot=TRUE)
?qqplot
?hist
?qqplot
samples = rnorm(50)
qqnorm(samples, xlim=c(-2,2), ylim=c(-2,2))
lines(c(-3,3), c(-3,3), col="red")
samples = rcauchy(50, location=0, scale=0.5)
qqnorm(samples)
lines(c(-3,3), c(-3,3), col="red")
# test normality in example on blood platelets
qqnorm((difference-mean(difference))/sd(difference), xlim=c(-2.2,2.2), ylim=c(-2.2,2.2))
lines(c(-3,3), c(-3,3), col="red")
?qqnorm
qqnorm(x)
?mean
y = mean(sample(space,5,replace=TRUE))
y
y = mean(sample(space,5,replace=TRUE))
y
y = mean(sample(space,5,replace=TRUE))
y
y = replace(1000, mean(sample(space,5,replace=TRUE)))
y = replicate(1000, mean(sample(space,5,replace=TRUE)))
y
qqnorm(y)
space = c(0,10,11)
source('~/Desktop/courses/statistics/code/ps1.R')
y = replicate(1000, mean(sample(space,5,replace=TRUE))); qqnorm(y)
y = replicate(1000, mean(sample(space,10,replace=TRUE))); qqnorm(y)
y = replicate(1000, mean(sample(space,200,replace=TRUE))); qqnorm(y)
obs = c(1,0,2,1,3)
hist(obs)
?qnorm
igma = 10
sample_mean = 31
alpha = 0.01
n = 10
step = qnorm(1-alpha/2)*sigma/sqrt(n)
ci_l = sample_mean - step
ci_r = sample_mean + step
length = ci_r - ci_l
sigma = 10
sample_mean = 31
alpha = 0.01
n = 10
step = qnorm(1-alpha/2)*sigma/sqrt(n)
ci_l = sample_mean - step
ci_r = sample_mean + step
length = ci_r - ci_l
length
5^2
ceiling(1.4)
N = ceiling((qnorm(1-alpha/2)*sigma/0.5)^2)
N
?qt
step2 = qt(1-alpha/2)*sigma/sqrt(n)
ci_l2 = sample_mean - step2
ci_r2 = sample_mean + step2
length2 = ci_r2 - ci_l2
print(length2/length)
)*sigma/sqrt(n)
ci_l2 = sample_mean - step2
ci_r2 = sample_mean + step2
length2 = ci_r2 - ci_l2
print(length2/length)
step2 = qt(1-alpha/2,n-1)*sigma/sqrt(n)
ci_l2 = sample_mean - step2
ci_r2 = sample_mean + step2
length2 = ci_r2 - ci_l2
print(length2/length)
#  1.5
?mle
?poisson.test
obs
mean(obs)
var(obs)
qqplot(obs)
qqnorm(obs)
?lines
lines(c(-3,3), c(-3,3), col="red")
?qqplot
?seq
obs = c(1,0,2,1,3)
hist(obs)
x = seq(0,10,length.out=100)
px = dpois(x,15)
plot(x,px)
obs = c(1,0,2,1,3)
hist(obs)
x = seq(0,10,length.out=100)
px = dpois(x,15)
x <- seq(0,10,length.out=100)
px <- dpois(x,15)
warnings
warnings()
?dpois
x <- seq(0,10,length.out=10)
x
x <- seq(0,10)
x
px <- dpois(x,15)
plot(x,px)
x <- seq(0,50)
px <- dpois(x,15)
plot(x,px)
?plot
plot(x,px,"l")
plot(x,px,"b")
plot(x,px,"l",col='red')
plot(x,px,col='red')
?dpois
qpois(0.95)
qpois(0.95,15)
qpois(0.95,15,lower.tail=FALSE)
ppois(9,15)
ppois(8,15)
qpois(1-alpha,lambda,lower.tail=FALSE)
)
hist(obs)
x <- seq(0,50)
lam = 15
px <- dpois(x,lam)
plot(x,px,col='red')
alpha = 0.05
qpois(1-alpha,lam
qpois(1-alpha,lam,lower.tail=FALSE)
qpois(1-alpha,lam,lower.tail=FALSE)
acc = qpois(1-alpha,lam,lower.tail=FALSE)
rej = acc-1
?lines
x.rej = seq(0,rej)
y.rej = dpois(x.rej)
y.rej = dpois(x.rej,lambda)
y.rej = dpois(x.rej,lam)
lines(x.rej,y.rej)
for(coord in x.rej){
lines(c(x.rej,0),c(x.rej,y))
}
for(coord in x.rej){
lines(c(x.rej,0),c(x.rej,y.rej)
}
y.rej = dpois(x.rej,lam)
for(coord in x.rej){
lines(c(x.rej,0),c(x.rej,y.rej))
}
lines(c(x.rej,0),c(x.rej,y.rej))
x.rej
x.rej[2]
x.rej[0]
x.rej[1]
x.rej[-1]
for(i in 0:rej){
lines(c(i,0),c(i,dpois(i,lam)))
}
?lines
?abline
for(i in 0:rej){
abline(v=i)
}
space = c(0,10,11)
x = sample(space,1000,replace=TRUE)
hist(x,plot=TRUE)
qqnorm(x)
hist(x,plot=TRUE)
qqnorm(x); qqline(x);
hist(x,plot=TRUE)
qqnorm(x); qqline(x);
y = replicate(1000, mean(sample(space,5,replace=TRUE))); qqnorm(y); qqline(x);
y = replicate(1000, mean(sample(space,5,replace=TRUE))); qqnorm(y); qqline(y);
y = replicate(1000, mean(sample(space,10,replace=TRUE))); qqnorm(y); qqline(y);
y = replicate(1000, mean(sample(space,200,replace=TRUE))); qqnorm(y); qqline(y);
#  1.4
sigma = 10
sample_mean = 31
alpha = 0.01
n = 10
step = qnorm(1-alpha/2)*sigma/sqrt(n)
ci_l = sample_mean - step
ci_r = sample_mean + step
length = ci_r - ci_l
N = ceiling((qnorm(1-alpha/2)*sigma/0.5)^2)
##
step2 = qt(1-alpha/2,n-1)*sigma/sqrt(n)
ci_l2 = sample_mean - step2
ci_r2 = sample_mean + step2
length2 = ci_r2 - ci_l2
print(length2/length)
pval = ppois(7,15)
pval
ppois(8,15)
ppois(8,15)
ppois(9,15)
?segments
replicate
?replicate
replicate(1,10)
replicate(10,10)
replicate(10,0)
?segments
rej.x0 = seq(0,rej); rej.y0 = replicate(rej+1,0); rej.y1 = dpois(rej.x0,lam);
segments(rej.x0, rej.y0, rej.x0, rej.y1)
obs = c(1,0,2,1,3)
hist(obs)
x <- seq(0,50)
lam = 15
px <- dpois(x,lam)
plot(x,px,col='red')
alpha = 0.05
acc = qpois(1-alpha,lam,lower.tail=FALSE)
rej = acc
rej.x0 = seq(0,rej); rej.y0 = replicate(rej+1,0); rej.y1 = dpois(rej.x0,lam);
segments(rej.x0, rej.y0, rej.x0, rej.y1)
pval = ppois(7,15)
ppois(8,15)
ppois(9,15)
?ppois
obs = c(1,0,2,1,3)
hist(obs)
x <- seq(0,50)
lam = 15
px <- dpois(x,lam)
plot(x,px,col='red')
alpha = 0.05
# P(T>acc) = 1-alpha
acc = qpois(1-alpha,lam,lower.tail=FALSE)
rej = acc-1
rej.x0 = seq(0,rej); rej.y0 = replicate(rej+1,0); rej.y1 = dpois(rej.x0,lam);
segments(rej.x0, rej.y0, rej.x0, rej.y1)
pval = ppois(7,15)
hist(obs)
obs = c(1,0,2,1,3)
x <- seq(0,50)
lam = 15
px <- dpois(x,lam)
plot(x,px,col='red')
alpha = 0.05
# P(T>acc) = 1-alpha
acc = qpois(1-alpha,lam,lower.tail=FALSE)
rej = acc-1
rej.x0 = seq(0,rej); rej.y0 = replicate(rej+1,0); rej.y1 = dpois(rej.x0,lam);
segments(rej.x0, rej.y0, rej.x0, rej.y1)
x <- seq(0,50)
lam = 15
p <- dpois(x,lam)
plot(x,p,col='red')
alpha = 0.05
# P(T>acc) = 1-alpha
acc = qpois(1-alpha,lam,lower.tail=FALSE)
rej = acc-1
rej.x0 = seq(0,rej); rej.y0 = replicate(rej+1,0); rej.y1 = dpois(rej.x0,lam);
segments(rej.x0, rej.y0, rej.x0, rej.y1)
pval = ppois(7,15)
?plot
plot(7,dpois(7,15),pch=22)
obs = c(1,0,2,1,3)
x <- seq(0,50)
lam = 15
p <- dpois(x,lam)
plot(x,p,col='red')
alpha = 0.05
# P(T>acc) = 1-alpha
acc = qpois(1-alpha,lam,lower.tail=FALSE)
rej = acc-1
rej.x0 = seq(0,rej); rej.y0 = replicate(rej+1,0); rej.y1 = dpois(rej.x0,lam);
segments(rej.x0, rej.y0, rej.x0, rej.y1)
pval = ppois(7,15)
plot(7,dpois(7,15),pch=22)
obs = c(1,0,2,1,3)
x <- seq(0,50)
lam = 15
p <- dpois(x,lam)
plot(x,p,col='red')
alpha = 0.05
# P(T>acc) = 1-alpha
acc = qpois(1-alpha,lam,lower.tail=FALSE)
rej = acc-1
rej.x0 = seq(0,rej); rej.y0 = replicate(rej+1,0); rej.y1 = dpois(rej.x0,lam);
segments(rej.x0, rej.y0, rej.x0, rej.y1)
pval = ppois(7,15)
plot(7,dpois(7,15),pch=22)
c(1,0,2,1,3)
x <- seq(0,50)
lam = 15
p <- dpois(x,lam)
plot(x,p,col='red')
alpha = 0.05
# P(T>acc) = 1-alpha
acc = qpois(1-alpha,lam,lower.tail=FALSE)
rej = acc-1
rej.x0 = seq(0,rej); rej.y0 = replicate(rej+1,0); rej.y1 = dpois(rej.x0,lam);
segments(rej.x0, rej.y0, rej.x0, rej.y1)
pval = ppois(7,15)
points
obs = c(1,0,2,1,3)
x <- seq(0,50)
lam = 15
p <- dpois(x,lam)
plot(x,p,col='red')
alpha = 0.05
# P(T>acc) = 1-alpha
acc = qpois(1-alpha,lam,lower.tail=FALSE)
rej = acc-1
rej.x0 = seq(0,rej); rej.y0 = replicate(rej+1,0); rej.y1 = dpois(rej.x0,lam);
segments(rej.x0, rej.y0, rej.x0, rej.y1)
pval = ppois(7,15)
points(7,dpois(7,15),pch=22)
points(7,dpois(7,15),pch=24)
?ppois
ppois(7,15)
ppois(8,15)
ppois(9,15)
err.t2 = ppois(rej,lam.t2)
lam.t2 = 10
err.t2 = ppois(rej,lam.t2)
1-err.t2
err.t2 = ppois(rej,lam.t2,lower.tail=FALSE)
err.t2 = ppois(rej+1,lam.t2,lower.tail=FALSE)
err.t2 = ppois(rej,lam.t2,lower.tail=FALSE)
space = c(0,10,11)
x = sample(space,1000,replace=TRUE)
hist(x,plot=TRUE)
qqnorm(x); qqline(x);
y = replicate(1000, mean(sample(space,5,replace=TRUE))); hist(y);
y = replicate(1000, mean(sample(space,5,replace=TRUE))); hist(y);
title(main="Mean of 5 samples")
y = replicate(1000, mean(sample(space,5,replace=TRUE))); hist(y, main = "Mean from 5 samples");
qqnorm(y); qqline(y);
qqnorm(y); qqline(y);
qqnorm(y, main = "Mean from 5 samples"); qqline(y);
qqnorm(y, main = "Q-Q Plot for mean from 5 samples"); qqline(y);
y = replicate(1000, mean(sample(space,10,replace=TRUE))); hist(y, main = "Mean from 5 samples");
qqnorm(y, main = "Q-Q Plot for mean from 5 samples"); qqline(y);
y = replicate(1000, mean(sample(space,10,replace=TRUE))); hist(y, main = "Mean from 10 samples");
qqnorm(y, main = "Q-Q Plot for mean from 10 samples"); qqline(y);
y = replicate(1000, mean(sample(space,5,replace=TRUE))); hist(y, main = "Mean from 5 samples");
qqnorm(y, main = "Q-Q Plot for mean from 5 samples"); qqline(y);
y = replicate(1000, mean(sample(space,10,replace=TRUE))); hist(y, main = "Mean from 10 samples");
qqnorm(y, main = "Q-Q Plot for mean from 10 samples"); qqline(y);
y = replicate(1000, mean(sample(space,200,replace=TRUE))); hist(y,main = "Mean from 200 samples");
qqnorm(y, main = "Q-Q Plot for mean from 200 samples"); qqline(y);
sigma = 10
sample_mean = 31
alpha = 0.01
n = 10
step = qnorm(1-alpha/2)*sigma/sqrt(n)
ci_l = sample_mean - step
ci_r = sample_mean + step
length = ci_r - ci_l
N = ceiling((qnorm(1-alpha/2)*sigma/0.5)^2)
N
step2 = qt(1-alpha/2,n-1)*sigma/sqrt(n)
ci_l2 = sample_mean - step2
ci_r2 = sample_mean + step2
length2 = ci_r2 - ci_l2
print(length2/length)
7/5
obs = c(1,0,2,1,3)
x <- seq(0,50)
lam = 15
p <- dpois(x,lam)
plot(x,p,col='red')
##
alpha = 0.05
# P(T>acc) = 1-alpha
acc = qpois(1-alpha,lam,lower.tail=FALSE)
rej = acc-1
rej.x0 = seq(0,rej); rej.y0 = replicate(rej+1,0); rej.y1 = dpois(rej.x0,lam);
segments(rej.x0, rej.y0, rej.x0, rej.y1)
pval = ppois(7,15)
points(7,dpois(7,15),pch=24)
lam.t2 = 10
err.t2 = ppois(rej,lam.t2,lower.tail=FALSE)
source("http://bioconductor.org/biocLite.R") biocLite('affy') biocLite('hgu95av2.db') source("http://bioinformatics.mdanderson.org/OOMPA/oompaLite.R") oompaLite()
source("http://bioconductor.org/biocLite.R") biocLite('affy') biocLite('hgu95av2.db') source("http://bioinformatics.mdanderson.org/OOMPA/oompaLite.R") oompaLite()
source("http://bioconductor.org/biocLite.R")
biocLite('affy')
defaults write org.R-project.R force.LANG en_US.UTF-8
defaults write org.R-project.R force.LANG en_US.UTF-8
setwd("~/frank_wolfe_svm/SVM-v0.91/results")
bcfw_5_2iter = read.table('bcfw_5planes_2inneriter.txt',header=TRUE)
bcfw_5_5iter = read.table('bcfw_5planes_5inneriter.txt',header=TRUE)
bcfw_5_10iter = read.table('bcfw_5planes_10inneriter.txt',header=TRUE)
bcfw_5_20iter = read.table('bcfw_5planes_20inneriter.txt',header=TRUE)
bcfw_5_2iter$bound_comp_time = cumsum(bcfw_5_2iter$time_after_bound - bcfw_5_2iter$time_before_bound)
bcfw_5_2iter$actual_time = bcfw_5_2iter$time_before_bound - c(0,bcfw_5_2iter$bound_comp_time[1:49])
bcfw_5_5iter$bound_comp_time = cumsum(bcfw_5_5iter$time_after_bound - bcfw_5_5iter$time_before_bound)
bcfw_5_5iter$actual_time = bcfw_5_5iter$time_before_bound - c(0,bcfw_5_5iter$bound_comp_time[1:49])
bcfw_5_10iter$bound_comp_time = cumsum(bcfw_5_10iter$time_after_bound - bcfw_5_10iter$time_before_bound)
bcfw_5_10iter$actual_time = bcfw_5_10iter$time_before_bound - c(0,bcfw_5_10iter$bound_comp_time[1:49])
bcfw_5_20iter$bound_comp_time = cumsum(bcfw_5_20iter$time_after_bound - bcfw_5_20iter$time_before_bound)
bcfw_5_20iter$actual_time = bcfw_5_20iter$time_before_bound - c(0,bcfw_5_20iter$bound_comp_time[1:49])
bcfw = read.table('bcfw_0planes.txt',header=TRUE)
bcfw_5 = read.table('bcfw_5planes.txt',header=TRUE)
bcfw_10 = read.table('bcfw_10planes.txt',header=TRUE)
bcfw_20 = read.table('bcfw_20planes.txt',header=TRUE)
bcfw_50 = read.table('bcfw_50planes.txt',header=TRUE)
bcfw_5_2iter = read.table('bcfw_5planes_2inneriter.txt',header=TRUE)
bcfw_5_5iter = read.table('bcfw_5planes_5inneriter.txt',header=TRUE)
bcfw_5_10iter = read.table('bcfw_5planes_10inneriter.txt',header=TRUE)
bcfw_5_20iter = read.table('bcfw_5planes_20inneriter.txt',header=TRUE)
#Remove time to get bounds
bcfw$bound_comp_time = cumsum(bcfw$time_after_bound - bcfw$time_before_bound)
bcfw$actual_time = bcfw$time_before_bound - c(0,bcfw$bound_comp_time[1:49])
bcfw_5$bound_comp_time = cumsum(bcfw_5$time_after_bound - bcfw_5$time_before_bound)
bcfw_5$actual_time = bcfw_5$time_before_bound - c(0,bcfw_5$bound_comp_time[1:49])
bcfw_10$bound_comp_time = cumsum(bcfw_10$time_after_bound - bcfw_10$time_before_bound)
bcfw_10$actual_time = bcfw_10$time_before_bound - c(0,bcfw_10$bound_comp_time[1:49])
bcfw_20$bound_comp_time = cumsum(bcfw_20$time_after_bound - bcfw_20$time_before_bound)
bcfw_20$actual_time = bcfw_20$time_before_bound - c(0,bcfw_20$bound_comp_time[1:49])
bcfw_50$bound_comp_time = cumsum(bcfw_50$time_after_bound - bcfw_50$time_before_bound)
bcfw_50$actual_time = bcfw_50$time_before_bound - c(0,bcfw_50$bound_comp_time[1:49])
bcfw_5_2iter$bound_comp_time = cumsum(bcfw_5_2iter$time_after_bound - bcfw_5_2iter$time_before_bound)
bcfw_5_2iter$actual_time = bcfw_5_2iter$time_before_bound - c(0,bcfw_5_2iter$bound_comp_time[1:49])
bcfw_5_5iter$bound_comp_time = cumsum(bcfw_5_5iter$time_after_bound - bcfw_5_5iter$time_before_bound)
bcfw_5_5iter$actual_time = bcfw_5_5iter$time_before_bound - c(0,bcfw_5_5iter$bound_comp_time[1:49])
bcfw_5_10iter$bound_comp_time = cumsum(bcfw_5_10iter$time_after_bound - bcfw_5_10iter$time_before_bound)
bcfw_5_10iter$actual_time = bcfw_5_10iter$time_before_bound - c(0,bcfw_5_10iter$bound_comp_time[1:49])
bcfw_5_20iter$bound_comp_time = cumsum(bcfw_5_20iter$time_after_bound - bcfw_5_20iter$time_before_bound)
bcfw_5_20iter$actual_time = bcfw_5_20iter$time_before_bound - c(0,bcfw_5_20iter$bound_comp_time[1:49])
plot(bcfw$actual_time, log(bcfw$duality_gap), col='green','l', xlab='Runnning time', ylab='log(duality gap')
lines(bcfw_5$actual_time, log(bcfw_5$duality_gap), col='black')
lines(bcfw_10$actual_time, log(bcfw_10$duality_gap), col='blue')
lines(bcfw_20$actual_time, log(bcfw_20$duality_gap), col='purple')
lines(bcfw_50$actual_time, log(bcfw_50$duality_gap), col='red')
legend("topright", c('BCFW','5 planes', '10 planes', '20 planes', '50 planes'), lty=c(1,1,1,1,1), col=c('green','black','blue','purple','red'))
plot(bcfw$actual_time, log(bcfw$duality_gap), col='green','l', xlab='Runnning time', ylab='log(duality gap)')
plot(bcfw$iteration, log(bcfw$duality_gap), col='green','l', xlab='Oracle calls', ylab='log(duality gap)')
lines(bcfw_5$iteration, log(bcfw_5$duality_gap), col='black')
lines(bcfw_10$iteration, log(bcfw_10$duality_gap), col='blue')
lines(bcfw_20$iteration, log(bcfw_20$duality_gap), col='purple')
lines(bcfw_50$iteration, log(bcfw_50$duality_gap), col='red')
legend("topright", c('BCFW','5 planes', '10 planes', '20 planes', '50 planes'), lty=c(1,1,1,1,1), col=c('green','black','blue','purple','red'))
png('gapvstime_inneriter.png')
plot(bcfw$iteration, log(bcfw$duality_gap), col='green','l', xlab='Oracle calls', ylab='log(duality gap)')
lines(bcfw_5_2iter$iteration, log(bcfw_5_2iter$duality_gap), col='black')
lines(bcfw_5_5iter$iteration, log(bcfw_5_5iter$duality_gap), col='blue')
lines(bcfw_5_10iter$iteration, log(bcfw_5_10iter$duality_gap), col='purple')
lines(bcfw_5_20iter$iteration, log(bcfw_5_20iter$duality_gap), col='red')
legend("topright", c('BCFW','5 planes / 2 iter', '5 planes / 5 iter', '5 planes / 10 iter', '5 planes / 20 iter'), lty=c(1,1,1,1,1), col=c('green','black','blue','purple','red'))
dev.off()
plot(bcfw$iteration, log(bcfw$duality_gap), col='green','l', xlab='Oracle calls', ylab='log(duality gap)')
lines(bcfw_5_2iter$iteration, log(bcfw_5_2iter$duality_gap), col='black')
lines(bcfw_5_5iter$iteration, log(bcfw_5_5iter$duality_gap), col='blue')
lines(bcfw_5_10iter$iteration, log(bcfw_5_10iter$duality_gap), col='purple')
lines(bcfw_5_20iter$iteration, log(bcfw_5_20iter$duality_gap), col='red')
legend("topright", c('BCFW','5 planes / 2 iter', '5 planes / 5 iter', '5 planes / 10 iter', '5 planes / 20 iter'), lty=c(1,1,1,1,1), col=c('green','black','blue','purple','red'))
plot(bcfw$actual_time, log(bcfw$duality_gap), col='green','l', xlab='Running time', ylab='log(duality gap)')
lines(bcfw_5_2iter$actual_time, log(bcfw_5_2iter$duality_gap), col='black')
lines(bcfw_5_5iter$actual_time, log(bcfw_5_5iter$duality_gap), col='blue')
lines(bcfw_5_10iter$actual_time, log(bcfw_5_10iter$duality_gap), col='purple')
lines(bcfw_5_20iter$actual_time, log(bcfw_5_20iter$duality_gap), col='red')
legend("topright", c('BCFW','5 planes / 2 iter', '5 planes / 5 iter', '5 planes / 10 iter', '5 planes / 20 iter'), lty=c(1,1,1,1,1), col=c('green','black','blue','purple','red'))
dev.off()
png('gapvstime_inneriter.png')
plot(bcfw$actual_time, log(bcfw$duality_gap), col='green','l', xlab='Running time', ylab='log(duality gap)')
lines(bcfw_5_2iter$actual_time, log(bcfw_5_2iter$duality_gap), col='black')
lines(bcfw_5_5iter$actual_time, log(bcfw_5_5iter$duality_gap), col='blue')
lines(bcfw_5_10iter$actual_time, log(bcfw_5_10iter$duality_gap), col='purple')
lines(bcfw_5_20iter$actual_time, log(bcfw_5_20iter$duality_gap), col='red')
legend("topright", c('BCFW','5 planes / 2 iter', '5 planes / 5 iter', '5 planes / 10 iter', '5 planes / 20 iter'), lty=c(1,1,1,1,1), col=c('green','black','blue','purple','red'))
dev.off()
png('gapvsoraclecalls_inneriter.png')
plot(bcfw$iteration, log(bcfw$duality_gap), col='green','l', xlab='Oracle calls', ylab='log(duality gap)')
lines(bcfw_5_2iter$iteration, log(bcfw_5_2iter$duality_gap), col='black')
lines(bcfw_5_5iter$iteration, log(bcfw_5_5iter$duality_gap), col='blue')
lines(bcfw_5_10iter$iteration, log(bcfw_5_10iter$duality_gap), col='purple')
lines(bcfw_5_20iter$iteration, log(bcfw_5_20iter$duality_gap), col='red')
legend("topright", c('BCFW','5 planes / 2 iter', '5 planes / 5 iter', '5 planes / 10 iter', '5 planes / 20 iter'), lty=c(1,1,1,1,1), col=c('green','black','blue','purple','red'))
dev.off()
